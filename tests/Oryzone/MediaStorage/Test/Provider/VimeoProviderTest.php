<?php
namespace Oryzone\MediaStorage\Test\Provider;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use org\bovigo\vfs\vfsStream;

use Oryzone\MediaStorage\Provider\VimeoProvider;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-08 at 11:35:16.
 */
class VimeoProviderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var VimeoProvider
     */
    protected $provider;

    /**
     * @var \org\bovigo\vfs\vfsStreamDirectory
     */
    protected $dir;

    /**
     * @var \Oryzone\MediaStorage\Model\MediaInterface
     */
    protected $media;

    /**
     * @var \Oryzone\MediaStorage\Variant\VariantInterface
     */
    protected $variant;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->dir = vfsStream::setup();
        $dir = $this->dir;
        $tempDir = vfsStream::url($dir->getName()) . '/';

        $this->media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $this->media->expects($this->any())
            ->method('getContext')
            ->will($this->returnValue('default'));
        $this->media->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('sample'));
        $this->media->expects($this->any())
            ->method('getContent')
            ->will($this->returnValue('http://vimeo.com/56974716'));
        $this->media->expects($this->any())
            ->method('getMetaValue')
            ->will($this->returnValueMap(array(
                array('id', null, '56974716')
            )));

        $this->variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $this->variant->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('default'));
        $this->variant->expects($this->any())
            ->method('getOptions')
            ->will($this->returnValue(array(
            'width' => 50,
            'height' => 30,
            'resize' => 'stretch',
        )));
        $this->variant->expects($this->any())
            ->method('getMetaValue')
            ->will($this->returnValueMap(array(
            array('width', null, 50),
            array('height', null, 30)
        )));

        $image = $this->getMock('\Imagine\Image\ImageInterface');
        $image->expects($this->any())
            ->method('save')
            ->will($this->returnCallback(
            function($destFile) use ($dir) {
                $temp = vfsStream::newFile(basename($destFile));
                $dir->addChild($temp);

                return true;
            }));
        $imagine = $this->getMock('\Imagine\Image\ImagineInterface');
        $imagine->expects($this->any())
            ->method('open')
            ->will($this->returnValue($image));

        $downloader = $this->getMock('\Oryzone\MediaStorage\Downloader\DownloaderInterface');
        $downloader->expects($this->any())
            ->method('download')
            ->will($this->returnCallback(
            function($url, $destination) use ($dir) {
                $temp = vfsStream::newFile(basename($destination));
                $temp->setContent(file_get_contents(__DIR__.'/../fixtures/images/sample.jpg'));
                $dir->addChild($temp);

                return true;
            }));

        $videoService = $this->getMock('\Oryzone\MediaStorage\Integration\Video\VideoServiceInterface');

        $this->provider = new VimeoProvider($tempDir, $imagine, $videoService, $downloader);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetName()
    {
        $this->assertEquals('vimeo', $this->provider->getName());
    }

    public function testPrepare()
    {
        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $this->provider->setOptions(array('metadata' => 'title'));
        $this->provider->prepare($this->media, $context);
    }

    public function testRender()
    {
        $url = 'http://example.com/preview.jpg';
        $options = array(
            'attributes' => array('class' => 'vimeoVideo')
        );
        $expectedHtml = '<iframe src="http://player.vimeo.com/video/56974716" frameborder="0" allowfullscreen webkitAllowFullScreen mozallowfullscreen class="vimeoVideo" ></iframe>';
        $rendered = $this->provider->render($this->media, $this->variant, $url, $options);
        $this->assertEquals($expectedHtml, $rendered);

        $options['mode'] = 'image';
        $expectedHtml = '<img src="http://example.com/preview.jpg" title="sample" class="vimeoVideo" />';
        $rendered = $this->provider->render($this->media, $this->variant, $url, $options);
        $this->assertEquals($expectedHtml, $rendered);

        $options['mode'] = 'embedUrl';
        $expected = sprintf(VimeoProvider::EMBED_URL, '56974716');
        $rendered = $this->provider->render($this->media, $this->variant, $url, $options);
        $this->assertEquals($expected, $rendered);

        $options['mode'] = 'url';
        $expected = sprintf(VimeoProvider::CANONICAL_URL, '56974716');
        $rendered = $this->provider->render($this->media, $this->variant, $url, $options);
        $this->assertEquals($expected, $rendered);
    }
}
